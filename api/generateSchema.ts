import fs from "fs";

const dbPath = "db.json";

function capitalizeFirstLetter(string: string): string {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

const baseSchema: any = {
    openapi: "3.0.0",
    info: {
        description: "OpenAPI Schema generated by pashaie@gmail.com",
        version: "0.1",
        title: "Fake JSON Server",
    },
    tags: [
        { name: "Auth", description: "Authentication endpoints" },
    ],
    paths: {},
    components: {
        schemas: {
            LoginRequest: {
                type: "object",
                properties: {
                    email: { type: "string", format: "email" },
                    password: { type: "string", format: "password" },
                },
                required: ["email", "password"],
            },
            RegisterRequest: {
                type: "object",
                properties: {
                    email: { type: "string", format: "email" },
                    password: { type: "string", format: "password" },
                },
                required: ["email", "password"],
            },
            TokenResponse: {
                type: "object",
                properties: {
                    token: { type: "string" },
                },
                required: ["token"],
            },
        },
    },
};

const genGetAll = (tag: string, model: string) => ({
    tags: [tag],
    summary: `Get all ${tag}`,
    operationId: `getAll${tag}`,
    parameters: [
        {
            name: "q",
            in: "query",
            description: "Full-text search",
            required: false,
            schema: { type: "string" },
        },
        {
            name: "_order",
            in: "query",
            description: "Sort direction: desc|asc",
            required: false,
            schema: { type: "string" },
        },
        {
            name: "_sort",
            in: "query",
            description: "Sort field",
            required: false,
            schema: { type: "string" },
        },
        {
            name: "_page",
            in: "query",
            required: false,
            schema: { type: "integer" },
        },
        {
            name: "_limit",
            in: "query",
            required: false,
            schema: { type: "integer" },
        },
    ],
    responses: {
        200: {
            description: "Successful response",
            content: {
                "application/json": {
                    schema: {
                        $ref: `#/components/schemas/${model}`,
                    },
                },
            },
        },
    },
});

const genPost = (tag: string, model: string, retModel: string) => ({
    tags: [tag],
    summary: `Create ${tag}`,
    operationId: `create${tag}`,
    requestBody: {
        required: true,
        content: {
            "application/json": {
                schema: {
                    $ref: `#/components/schemas/${model}`,
                },
            },
        },
    },
    responses: {
        201: {
            description: "Created successfully",
            content: {
                "application/json": {
                    schema: {
                        $ref: `#/components/schemas/${retModel}`,
                    },
                },
            },
        },
    },
});

const genGet = (tag: string, model: string) => ({
    tags: [tag],
    summary: `Get ${tag} by ID`,
    operationId: `get${tag}ById`,
    parameters: [
        {
            name: "id",
            in: "path",
            required: true,
            description: "The ID to retrieve",
            schema: { type: "integer" },
        },
    ],
    responses: {
        200: {
            description: "Successful response",
            content: {
                "application/json": {
                    schema: {
                        $ref: `#/components/schemas/${model}`,
                    },
                },
            },
        },
        404: {
            description: "Not Found",
        },
    },
});

const genPut = (tag: string, model: string) => ({
    tags: [tag],
    summary: `Update ${tag} by ID`,
    operationId: `update${tag}`,
    parameters: [
        {
            name: "id",
            in: "path",
            required: true,
            description: "The ID to update",
            schema: { type: "integer" },
        },
    ],
    requestBody: {
        required: true,
        content: {
            "application/json": {
                schema: {
                    $ref: `#/components/schemas/${model}`,
                },
            },
        },
    },
    responses: {
        200: {
            description: "Updated successfully",
            content: {
                "application/json": {
                    schema: {
                        $ref: `#/components/schemas/${model}`,
                    },
                },
            },
        },
    },
});

const genDelete = (tag: string) => ({
    tags: [tag],
    summary: `Delete ${tag} by ID`,
    operationId: `delete${tag}`,
    parameters: [
        {
            name: "id",
            in: "path",
            required: true,
            description: "The ID to delete",
            schema: { type: "integer" },
        },
    ],
    responses: {
        200: {
            description: "Deleted successfully",
        },
    },
});

const genPatch = (tag: string, model: string) => ({
    tags: [tag],
    summary: `Partially update ${tag} by ID`,
    operationId: `patch${tag}`,
    parameters: [
        {
            name: "id",
            in: "path",
            required: true,
            description: "The ID to update",
            schema: { type: "integer" },
        },
    ],
    requestBody: {
        required: true,
        content: {
            "application/json": {
                schema: {
                    $ref: `#/components/schemas/${model}`,
                },
            },
        },
    },
    responses: {
        200: {
            description: "Updated successfully",
            content: {
                "application/json": {
                    schema: {
                        $ref: `#/components/schemas/${model}`,
                    },
                },
            },
        },
    },
});

const genModel = (sample: Record<string, any>) => {
    const result: any = {
        type: "object",
        properties: {},
    };

    for (const key in sample) {
        const type = typeof sample[key];
        result.properties[key] = type === "number" ? { type: "integer", format: "int32" } : { type };
    }

    return result;
};

const genEndpoint = (name: string, first: Record<string, any>, schema: any) => {
    const tagName = capitalizeFirstLetter(name);
    const modelName = `${tagName}Model`;
    const modelListName = `${tagName}ModelList`;
    const createModelName = `${tagName}CreateModel`;

    schema.tags.push({ name: tagName });

    schema.paths[`/${name}`] = {
        get: genGetAll(tagName, modelListName),
        post: genPost(tagName, createModelName, modelName),
    };

    schema.paths[`/${name}/{id}`] = {
        get: genGet(tagName, modelName),
        put: genPut(tagName, modelName),
        delete: genDelete(tagName),
        patch: genPatch(tagName, createModelName),
    };

    const modelDef = genModel(first);
    const modelCreateDef = { ...modelDef, properties: { ...modelDef.properties } };
    delete modelCreateDef.properties.id;

    schema.components.schemas[modelName] = modelDef;
    schema.components.schemas[createModelName] = modelCreateDef;
    schema.components.schemas[modelListName] = {
        type: "array",
        items: {
            $ref: `#/components/schemas/${modelName}`,
        },
    };

    return schema;
};

export const generateSchema = () => {
    const db = JSON.parse(fs.readFileSync(dbPath, "utf-8"));
    let result = baseSchema;

    // Add login and register endpoints
    result.paths["/auth/login"] = {
        post: {
            tags: ["Auth"],
            summary: "Login",
            operationId: "login",
            requestBody: {
                required: true,
                content: {
                    "application/json": {
                        schema: {
                            $ref: "#/components/schemas/LoginRequest",
                        },
                    },
                },
            },
            responses: {
                200: {
                    description: "Login successful",
                    content: {
                        "application/json": {
                            schema: {
                                $ref: "#/components/schemas/TokenResponse",
                            },
                        },
                    },
                },
                401: {
                    description: "Unauthorized",
                },
            },
        },
    };

    result.paths["/auth/register"] = {
        post: {
            tags: ["Auth"],
            summary: "Register",
            operationId: "register",
            requestBody: {
                required: true,
                content: {
                    "application/json": {
                        schema: {
                            $ref: "#/components/schemas/RegisterRequest",
                        },
                    },
                },
            },
            responses: {
                201: {
                    description: "Registration successful",
                    content: {
                        "application/json": {
                            schema: {
                                $ref: "#/components/schemas/TokenResponse",
                            },
                        },
                    },
                },
                403: {
                    description: "User already exists",
                },
            },
        },
    };

    for (const endpoint in db) {
        result = genEndpoint(endpoint, db[endpoint][0], result);
    }

    return result;
};